spring.application.name=grupo19

# Puerto en el que se ejecutará el servidor
<<<<<<< HEAD
server.port=9091
=======
server.port=8080
>>>>>>> 9e299a9 (Proyecto antes de insertar la seguridad en los endpoints)

# Configuración de la base de datos PostgreSQL
# URL de conexión a la base de datos PostgreSQL (protocolo, host, puerto y nombre de la base de datos)
spring.datasource.url=jdbc:postgresql://localhost:5432/recomendacion
# Nombre de usuario para conectarse a la base de datos
spring.datasource.username=postgres
# Contraseña para conectarse a la base de datos
<<<<<<< HEAD
spring.datasource.password=ronnie
=======
spring.datasource.password=postgres.99
>>>>>>> 9e299a9 (Proyecto antes de insertar la seguridad en los endpoints)
# Clase del driver JDBC para PostgreSQL
spring.datasource.driver-class-name=org.postgresql.Driver

# Configuración de JPA e Hibernate
<<<<<<< HEAD
# Estrategia para la creación y actualización de las tablas en la base de datos
=======
# Estrategia para la creación y actualización de las tablas en la base de datos////
>>>>>>> 9e299a9 (Proyecto antes de insertar la seguridad en los endpoints)
spring.jpa.hibernate.ddl-auto=update
# Muestra las consultas SQL generadas por Hibernate en la consola
spring.jpa.show-sql=true
# Dialecto de Hibernate para PostgreSQL, que optimiza las consultas para esta base de datos
<<<<<<< HEAD
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect

spring.mvc.throw-exception-if-no-handler-found=true
#
spring.web.resources.add-mappings=false
=======
#spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect

spring.mvc.throw-exception-if-no-handler-found=true
#/////
spring.web.resources.add-mappings=true
>>>>>>> 9e299a9 (Proyecto antes de insertar la seguridad en los endpoints)
#

# Agregamos la configuracion para la conexion con redis
#spring.cache.type=redis
#spring.redis.host=localhost
#spring.redis.port=6379

# Configuración de Spring Session
spring.session.store-type=jdbc
spring.session.jdbc.initialize-schema=always
spring.session.timeout=30m


# Configuración JWT
# Clave secreta utilizada para firmar los tokens JWT
# Esta clave debe ser lo suficientemente larga y compleja para garantizar la seguridad
# del token. En un entorno de producción, se recomienda utilizar una clave generada aleatoriamente y almacenarla de forma segura.
# En este caso, se utiliza una clave de ejemplo, pero en un entorno real, se debe cambiar por una clave segura.
app.jwtSecret=QWERTYUIOPASDFGHJKLZXCVBNMQWERTYUIOPASDFGHJKLZXCVBNMQWERTYUIOPASDFGHJKLZXCVBNM
#1 día en milisegundos
app.jwtExpirationMs=86400000




#config poneapi swagger
<<<<<<< HEAD
#springdoc.swagger-ui.path=/swagger-ui-custom.html
=======
#springdoc.swagger-ui.path=/swagger-ui-custom.html
# En application.properties
logging.level.org.springframework.web=DEBUG






>>>>>>> 9e299a9 (Proyecto antes de insertar la seguridad en los endpoints)
